mainmodule SuperResolution {


readonly CProxy_Main mainProxy;

mainchare Main {
  entry Main(CkArgMsg *m);
  entry [reductiontarget]void Converge(/*param depending on the callback/reduction scheme*/);
  
  /*
  Recv final patch and create the hiRes image
  */
  entry [reductiontarget]void RecvFinalPatch(int i, int j, int index);

};

array [2D] PatchArray {
  entry PatchArray(void); //call setup 

  entry void RecvCandidatesFromNeighbors(int dir, int size, int indices[size]); 
  entry void RecvMessageFromNeighbor(int dir,int size, double msg[size]);
  entry void GetFinalPatch(); // calls cb RecvFinalPatch on mainProxy
  entry void Setup() {

    serial "setup" {
      SetupPatch(); //finds the candidate patches
      SendPatchesToNeighbors(); 
    }
    
    // need to handle border patch
    for(recv_count=0; recv_count < 4; ++recv_count)
    {
      when RecvCandidatesFromNeighbors(int dir, int size, int indices[size]) 
      serial "Process Patch" {
        ProcessCandidates(dir, size, indices);
      }
    }

    serial "init msgs" {
      InitMsg();
    }
    serial "call run" {
      thisProxy.Run();
    }
  };

  entry void Run()
  {
    for (iter=0; iter < MAX_ITER; ++iter)
    {
      serial "Compute message" {
        ComputeMessage();
        SendMessageToNeighbors();
      }

      for (recv_count=0;recv_count<4;++Recv_count)
      {
        when RecvMessageFromNeighbor[iter](int itr_, int dir,int size, double msg[size])
        serial "Process message" {
          ProcessMsgFromNeighbor(dir,size,msg);
        }
      }
      

    }
    serial "convergence test" 
    {
       ComputeBelief();
       ConvergenceTest(); //calls cb converge on mainProxy
    }
  }; 
 };
};
