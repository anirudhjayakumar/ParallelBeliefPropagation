mainmodule SuperResolution {
include "pup_stl.h";

readonly CProxy_Main mainProxy;
readonly CProxy_PatchArray arrayProxy; 

nodegroup DBNode {
  entry DBNode(void);
  entry void FillDB(const string& sTrainingSetDirPath);
};

mainchare Main {
  entry Main(CkArgMsg *m);
  entry [reductiontarget] void CheckConverged(double norm);

  entry [reductiontarget] void DB_Populated();
  /*
  Recv final patch and create the hiRes image
  */
  entry [reductiontarget] void RecvFinalPatch(int i, int j, int index);
};

array [2D] PatchArray {
  entry PatchArray(void); //call setup 

  entry void RecvCandidatesFromNeighbors(int dir, int size, int indices[size]); 
  entry void RecvMessageFromNeighbor(int itr,int dir,vector<double> msg);
  entry void GetFinalPatch(); // calls cb RecvFinalPatch on mainProxy
  entry void Setup() {
    serial "setup" {
      SetupPatch(); //finds the candidate patches
      SendPatchesToNeighbors(); 
    }

    if (y > 0) {
      when RecvCandidatesFromNeighbors(int dir, int size, int indices[size]) 
      serial "Process Patch south" {
        ProcessCandidates(dir, size, indices);
      }
    }

    if (y < dim_y-1) {
      when RecvCandidatesFromNeighbors(int dir, int size, int indices[size]) 
      serial "Process Patch north" {
        ProcessCandidates(dir, size, indices);
      }
    }

    if (x > 0) {
      when RecvCandidatesFromNeighbors(int dir, int size, int indices[size]) 
      serial "Process Patch east" {
        ProcessCandidates(dir, size, indices);
      }
    }

    if (x < dim_x-1) {
      when RecvCandidatesFromNeighbors(int dir, int size, int indices[size]) 
      serial "Process Patch west" {
        ProcessCandidates(dir, size, indices);
      }
    }

    serial "init msgs" {
      InitMsg();
    }
    serial "call run" {
      thisProxy.Run();
    }
  };

  entry void Run()
  {
    for (iter = 0; iter < CONV_PERIOD; ++iter)
    {
      serial "Compute message" {
        ComputeMessages();
        SendMessagesToNeighbors();
      }

      // UP
      if (y > 0) {
        when RecvMessageFromNeighbor[iter](int itr, int dir, vector<double> msg) serial "Process message north" {
           ProcessMsgFromNeighbor(dir, msg);
        }
      }

      // DOWN
      if (y < dim_y-1) {
        when RecvMessageFromNeighbor[iter](int itr, int dir, vector<double> msg) serial "Process message south" {
          ProcessMsgFromNeighbor(dir, msg);
        }
      }

      // LEFT
      if (x > 0) {
        when RecvMessageFromNeighbor[iter](int itr, int dir, vector<double> msg) serial "Process message west" {
          ProcessMsgFromNeighbor(dir, msg);
        }
      }

      // RIGHT
      if (x < dim_x-1) {
        when RecvMessageFromNeighbor[iter](int itr, int dir, vector<double> msg) serial "Process message east" {
          ProcessMsgFromNeighbor(dir, msg);
        }
      }
    }

    serial "convergence test" 
    {
       ConvergenceTest(); 
    }
  }; 
 };
};
